# https://taskfile.dev
version: "3"
vars:
  DOCKER_BUILD_ARGS: >-
    --build-arg HTTP_PROXY --build-arg HTTPS_PROXY --build-arg NO_PROXY
    --build-arg CI_REGISTRY

tasks:
  build-image:
    desc: Build docker image
    cmds:
      - |
        ref_name=$(git rev-parse --abbrev-ref HEAD)
        ##  If the repository is in a detached HEAD state (not on any branch), this command will fail or return HEAD.
        if [ -z "$ref_name" ] || [ "$ref_name" = "HEAD" ]; then
          ref_name=$(git describe --tags)
        fi
        export PYTHON_BASE_IMAGE_TAG=$ref_name
        echo "Build from base image with tag="$PYTHON_BASE_IMAGE_TAG
        export `cat .env_dev` && \
        docker build {{.DOCKER_BUILD_ARGS}} \
        --build-arg PYTHON_BASE_IMAGE_TAG \
        --progress plain \
        -t python-base .

  rebuild-image:
    desc: ReBuild docker image
    cmds:
      - task: build-image
        vars:
          DOCKER_BUILD_ARGS: '{{.DOCKER_BUILD_ARGS}} --no-cache'

  test-image:
    desc: Test docker image
    cmds:
      - task: build-image
      - docker run --rm -it python-base bash -c "python --version"

  dockerfile-check:
    desc: Run static analysis tool (linter) for Dockerfile
    cmds:
      - >-
          docker run --rm -it
          -v $(pwd):/app
          hadolint/hadolint:latest-alpine
          sh -c 'hadolint --version && cd app && echo "Checking..." && hadolint Dockerfile && echo "Done"'

  shell-check:
    desc: Run static analysis tool (linter) for shell scripts
    cmds:
      - >-
          docker run --rm -it
          -v $(pwd):/app
          koalaman/shellcheck-alpine:latest
          sh -c 'shellcheck --version && cd app && echo "Checking..." && shellcheck scripts/*.sh && echo "Done"'

  static-analysis:
    desc: Run code formatter check, linting, static type analysis
    cmds:
      - task: shell-check
      - task: dockerfile-check