# https://taskfile.dev
version: "3"

vars:
  CODE_DIRS: src/ tests/
  PYTHON_VERSION: 3.10
  GREETING: Hello, World!

tasks:
  default:
    cmds:
      - echo "{{.GREETING}}"
    silent: true

  run:
    desc: Run the main application
    cmds:
      - python src/main.py

  bump-calver:
    desc: Bump Cal version
    cmds:
      - ./bump_calver_build.sh

  bump-semver-patch:
    desc: Bump Patch of SemVer
    cmds:
      - cz bump --increment PATCH

  bump-semver-minor:
    desc: Bump Minor of SemVer
    cmds:
      - cz bump --increment MINOR

  netbox:
    dir: ~/projects/netbox-docker
    cmds:
      - docker compose up -d

  netbox-openapi:
    desc: download NetBox openapi schema
    cmds:
      - wget http://localhost:8000/api/docs/\?format\=openapi -O netbox-openapi.json

  generate-netbox-models:
    desc: generate pydantic models for NetBox openapi schema
    cmds:
      - datamodel-codegen --input netbox-openapi.json --output model.py

  install:
    desc: Install required dependencies
    cmds:
      - poetry install --with dev --with test --with doc

  clean:
    desc: Clean up the installed dependencies
    cmds:
      - rm -rf .venv

  reinstall:
    desc: Clean up and reinstall required dependencies
    cmds:
      - task: clean
      # - virtualenv -p python{{.PYTHON_VERSION}} .venv
      - task: install

  update:
    desc: Update dependencies
    cmds:
      - poetry update

  build:
    desc: Build wheels
    cmds:
      - poetry build

  publish:
    desc: Build and publish wheels and sdist to PyPi
    cmds:
      - poetry publish --build -u __token__ -p ${PYPI_TOKEN}

  pytest:
    desc: Run tests
    cmds:
      - poetry run pytest tests

  mypy:
    desc: Run static type checker mypy
    cmds:
      - poetry run mypy {{.CODE_DIRS}}

  black:
    desc: Run code formatter
    cmds:
      - poetry run black {{.CODE_DIRS}}

  black-check:
    desc: Verify code formatting
    cmds:
      - poetry run black {{.CODE_DIRS}} --check

  flake8:
    desc: Run linter flake8
    cmds:
      - poetry run flake8 {{.CODE_DIRS}}

  pylint:
    desc: Lint the codebase
    cmds:
      - poetry run pylint {{.CODE_DIRS}}

  ruff:
    desc: Run linter Ruff
    cmds:
      - poetry run ruff check {{.CODE_DIRS}}

  ruff-fix:
    desc: Run linter Ruff
    cmds:
      - poetry run ruff check --fix {{.CODE_DIRS}}

  static-analysis:
    desc: Run code formatter check, linting, static type analysis
    cmds:
      - task: black-check
      - task: flake8
      - task: mypy

  build-docs:
    desc: Build docs
    cmds:
      - poetry run mkdocs build --clean --strict

  publish-docs:
    desc: Publish docs to GitHub Pages
    cmds:
      - poetry run mkdocs gh-deploy --force

  test-docs:
    desc: Verify links in the docs
    cmds:
      - PATH=$PATH:. command -v htmltest >/dev/null 2>&1 || { curl https://htmltest.wjdp.uk | bash -s -- -b .; }
      - PATH=$PATH:. htmltest -c docs/htmltest.yml

  build-test-docs:
    desc: Build and test link in the docs
    cmds:
      - task: build-docs
      - task: test-docs

  test-suite:
    desc: Run all tests
    cmds:
      - task: static-analysis
      - task: pytest

  build-image:
    desc: Build docker image
    cmds:
      - >
        export `cat .env_dev` && docker build
        --build-arg HTTP_PROXY
        --build-arg HTTPS_PROXY
        --build-arg NO_PROXY
        --build-arg CI_REGISTRY
        --progress plain
        -t python-base .

  test-image:
    desc: Test docker image
    cmds:
      - task: build-image
      - docker run --rm -it python-base bash -c "python --version"

