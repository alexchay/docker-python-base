# https://taskfile.dev
version: "3"
dotenv: ['.env']
env:
  # PYTHON_VERSION: "3.10"
vars:
  DOCKER_BUILDKIT: 1
  DOCKER_BUILD_ARGS: >-
    --build-arg HTTP_PROXY --build-arg HTTPS_PROXY --build-arg NO_PROXY
    --build-arg BASE_IMAGE_NAME --build-arg BASE_IMAGE_TAG
  DOCKER_RUN_ARGS: >-
    -e HTTP_PROXY -e HTTPS_PROXY -e NO_PROXY
    -v $(pwd)/:/build/ -w /build/

tasks:
  env:
    desc: Print environment variables
    cmds:
      - |
        env | grep -E '(HOME|PATH|IMAGE|DOCKER|TAG|PYTHON)'
  build-image:
    desc: Build docker image
    cmds:
      - |
        echo "Build from base image ${BASE_IMAGE_NAME}:${BASE_IMAGE_TAG}"
        export DOCKER_BUILDKIT={{.DOCKER_BUILDKIT}}
        docker buildx build {{.DOCKER_BUILD_ARGS}} \
        --progress plain \
        -t local/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG} .

  rebuild-image:
    desc: ReBuild docker image
    cmds:
      - task: build-image
        vars:
          DOCKER_BUILD_ARGS: '{{.DOCKER_BUILD_ARGS}} --no-cache'

  test-image:
    desc: Test docker image
    cmds:
      - |
        docker run --rm -it {{.DOCKER_RUN_ARGS}} \
        --entrypoint "./scripts/test-image.sh" \
        local/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}

  remove-image:
    desc: Test docker image
    cmds:
      - |
        docker image rm \
        local/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}

  build-and-test:
    desc: Build and test docker image
    cmds:
      - task: build-image
      - task: test-image

  run-image:
    desc: Run docker image
    cmds:
      - task: build-image
      - |
        docker run --rm -it {{.DOCKER_RUN_ARGS}} \
        local/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG} sh

  shell-check:
    desc: Run static analysis tool (linter) for shell scripts
    cmds:
      - >-
          docker run --rm -it {{.DOCKER_RUN_ARGS}}
          koalaman/shellcheck-alpine:latest
          sh -c "shellcheck --version && echo 'Checking...' && find scripts -name '*.sh' -exec shellcheck {} + && echo 'Done'"

  dockerfile-check:
    desc: Run static analysis tool (linter) for Dockerfile
    cmds:
      - >-
          docker run --rm -it {{.DOCKER_RUN_ARGS}}
          hadolint/hadolint:latest-alpine
          sh -c 'hadolint --version && echo "Checking..." && hadolint Dockerfile && echo "Done"'

  static-analysis:
    desc: Run code formatter check, linting, static type analysis
    cmds:
      - task: shell-check
      - task: dockerfile-check
