include:
  - project: '$GITLAB_CI_PATH'
    ref: '$GITLAB_CI_REF_NAME'
    file: '/ext/.build_docker_image.yml'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

variables:
  DOCKER_BUILD_ARGS: >-
    --build-arg BASE_IMAGE_NAME --build-arg BASE_IMAGE_TAG
  CACHE_IMAGE: $CI_REGISTRY/$CI_REGISTRY_PATH/$BUILD_IMAGE_NAME:buildcache_$BUILD_IMAGE_TAG
  RELEASE_IMAGE: $CI_REGISTRY/$CI_REGISTRY_PATH/$BUILD_IMAGE_NAME:$BUILD_IMAGE_TAG


build_image:
  stage: build
  extends:
    - .build_image


test_image:
  stage: test
  extends:
    - .test_image
  script:
    - pwd
    - ./scripts/test.sh
  variables:
    IMAGE_TAGS: $BUILD_IMAGE_TAG


release_image:
  stage: release
  # Official docker image.
  image: docker:$DOCKER_IMAGE_TAG
  extends:
    - .release
  before_script:
    - apk add --no-cache crane || true
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if [ "$CI_REGISTRY_TLS_VERIFY" = "0" ]; then export REGISTRY_INSECURE=" --insecure"; fi
    - crane $REGISTRY_INSECURE tag $BUILD_IMAGE $BUILD_IMAGE_TAG
    - crane $REGISTRY_INSECURE manifest $RELEASE_IMAGE
    - |
      if [ -n "$BUILD_IMAGE_TAGS" ]; then
        OLD_IFS="$IFS"
        IFS=','
        set -- $BUILD_IMAGE_TAGS
        IFS="$OLD_IFS"
        for image_tag; do
          trimmed_tag=$(echo "$image_tag" | xargs)
          crane $REGISTRY_INSECURE tag $BUILD_IMAGE "$trimmed_tag"
        done
      fi

cleanup_build:
  stage: cleanup
  when: always
  # Official docker image.
  image: docker:$DOCKER_IMAGE_TAG
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache curl jq || true
  script:
    - !reference [.cleanup_build, script]

