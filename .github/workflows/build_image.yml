name: Build Image
description: Build and push Docker image to Docker Hub

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      from_image_tag:
        description: "Base image tag to use for the build (e.g., 3.12.2-slim)"
        required: false
      image_tag:
        description: "Image tag to use for the build (e.g., 3.12)"
        required: false


jobs:
  build_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Process image tags
        id: process_tags
        run: |

          # Check if the base image tag is provided from workflow_dispatch user's input
          FROM_IMAGE_TAG=$(if [ -n "${{ inputs.from_image_tag }}" ]; then echo ${{ inputs.from_image_tag }}; else echo $(./scripts/bash_helpers.sh get_image_tag); fi)
          echo "FROM_IMAGE_TAG=$FROM_IMAGE_TAG" >> $GITHUB_OUTPUT

          # Check if the image tag is provided from workflow_dispatch user's input
          IMAGE_TAG=$(if [ -n "${{ inputs.image_tag }}" ]; then echo ${{ inputs.image_tag }}; else echo $FROM_IMAGE_TAG; fi)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

          # Get the image name from build.env file (example: IMAGE_NAME=python-base)
          # This file should contain the environment variables used in the Dockerfile and the build process.
          export `cat .build.env` && echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

          # Extract the Python version from the image tag
          # Example: 3.12.2-slim -> 3.12
          PYTHON_VERSION=$(echo $FROM_IMAGE_TAG | cut -d'-' -f1 | awk 'NR==1{split($1, a, "."); print a[1]"."a[2]}')
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/python-base
          tags: |
            type=raw,value=${{ steps.process_tags.outputs.IMAGE_TAG }}

      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          build-args: |
            FROM_IMAGE_TAG=${{ steps.process_tags.outputs.FROM_IMAGE_TAG }}
          tags: local/image

      - name: Test
        run: |
          docker run --rm \
            -v $(pwd)/:/home/user/build/ \
            --env-file=.build.env -e PYTHON_VERSION \
            local/image bash \
            -c "cd build && ./scripts/check_python_version.sh"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch multi-platform version SHAs
        id: multi-arch-digests
        run: |
          manifests_shas=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/python-base:${{ steps.process_tags.outputs.IMAGE_TAG }} | jq -r '.manifests[] | .digest' | paste -s -d ', ' -)
          echo $manifests_shas
          echo "multi-arch-digests=$manifests_shas" >> $GITHUB_OUTPUT

      - name: Delete old images
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          package: "python-base"
          delete-tags: "${{ steps.process_tags.outputs.IMAGE_TAG }}"

      - name: Build and Push Docker image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            FROM_IMAGE_TAG=${{ steps.process_tags.outputs.FROM_IMAGE_TAG }}
          tags: ${{ steps.meta.outputs.tags }}

